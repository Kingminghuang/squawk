RAM_SIZE ?= 10*1024
SERVICE_CHUNK_SIZE ?= 1024

AT ?= @
CFLAGS_ARCH = -m32
#CFLAGS_OPTS = -Os
CFLAGS_OPTS = -Os -flto

JAVA = java
JAVAC = javac
JAR = jar
FIND = find
CC = gcc
CXX = g++
STRIP = strip
AWK = awk
EGREP = egrep
CAT = cat

SQUAWK_TOP = squawk
BUILD_TOP ?= build
JARFILE = classes.jar
JARFILES = $(JARFILE) $(SQUAWK_TOP)/cldc/classes.target.jar
DCA_CONFIG := $(SQUAWK_TOP)/builder/dca.config
MAPPER_CONFIG = $(SQUAWK_TOP)/builder/mapper.config
JAVA_APPLICATION_MANAGER_CONFIG = $(SQUAWK_TOP)/builder/java_application_manager.config

MAP ?= true

ifeq ($(MAP),true)
  DCA_CONFIG := $(DCA_CONFIG),$(MAPPER_CONFIG)
else
  ROMIZER_FLAGS += -stripSystemClassName
endif

ifeq ($(STATIC_MAIN_CLASS),false)
  DCA_CONFIG := $(DCA_CONFIG),$(JAVA_APPLICATION_MANAGER_CONFIG)
  BUILD_FLAGS += -DSTATIC_MAIN_CLASS=0
endif

DCA_CONFIG := $(DCA_CONFIG),$(SQUAWK_TOP)/builder/$(GC_DCA_CONF)

FASTALLOC = false

BUILD_FLAGS += -DMACROIZE -D_GNU_SOURCE -DSQUAWK_64=false -DPLATFORM_BIG_ENDIAN=false -DPLATFORM_UNALIGNED_LOADS=false -DPLATFORM_TYPE_BARE_METAL=1
BUILD_FLAGS += -DDEFAULT_RAM_SIZE=$(RAM_SIZE)
BUILD_FLAGS += -DSERVICE_CHUNK_SIZE=$(SERVICE_CHUNK_SIZE)
BUILD_FLAGS += -DFASTALLOC=$(FASTALLOC)
BUILD_FLAGS += -DGCC_OPTIMIZE_INTERPRETER_LOOP=0
BUILD_FLAGS += -DMINIMAL_ERROR_REPORT
BUILD_FLAGS += -DHAS_METHOD_OFFSETS=1

INCLUDE_DIRS += $(BUILD_TOP)/vmcore/src/vm $(SQUAWK_TOP)/vmcore/src/vm $(SQUAWK_TOP)/vmcore/src/vm $(SQUAWK_TOP)/vmcore/src/vm/fp $(SQUAWK_TOP)/vmcore/src/rts/gcc
CFLAGS += $(CFLAGS_ARCH) $(BUILD_FLAGS) $(patsubst %,-I%,$(INCLUDE_DIRS)) $(CFLAGS_OPTS) -fdata-sections -ffunction-sections -MD
LDFLAGS += $(CFLAGS_ARCH) $(CFLAGS_OPTS) -Wl,-gc-sections
LDSUFFIXES += -lm
TMP = /tmp/squawk.$(shell pwd | sum | awk '{print $$1}')
CLEAN_TARGETS = $(BUILD_TOP) $(JARFILE) $(TMP) classes

C_SOURCE_DIRS = src/native $(SQUAWK_TOP)/vmcore/src/rts/gcc $(SQUAWK_TOP)/vmcore/src/vm/fp $(SQUAWK_TOP)/vmcore/src/vm
C_SOURCE_FILES  = $(shell for i in $(patsubst %,%/*.c,$(C_SOURCE_DIRS)); do if [ -f $$i ]; then basename $$i; fi; done)
OBJECT_DIR = $(BUILD_TOP)/obj
OBJECT_FILES = $(patsubst %.c,$(OBJECT_DIR)/%.o,$(C_SOURCE_FILES))
OBJECT_FILES += $(OBJECT_DIR)/squawk.suite.o
DEPENDS = $(patsubst %.o,%.d,$(OBJECT_FILES))

JAVA_SOURCE_FILES = $(shell $(FIND) src/classes -name '*.java' -print)

vpath %.c $(C_SOURCE_DIRS)

all:: dirs
all:: $(JARFILE)
all:: romize
all:: compile
all:: link
all:: strip

dirs:
	$(AT)mkdir -p $(OBJECT_DIR)

$(JARFILE): $(JAVA_SOURCE_FILES)
	$(AT)rm -rf classes
	$(AT)mkdir -p classes
	$(AT)$(JAVAC) -bootclasspath $(SQUAWK_TOP)/cldc/classes.target.jar -d classes $(JAVA_SOURCE_FILES)
	$(AT)$(JAR) cf classes.jar -C classes .
	$(AT)$(JAVA) -cp $(SQUAWK_TOP)/build.jar:$(SQUAWK_TOP)/tools/asm-all-5.2.jar com.sun.squawk.builder.asm.MainFinder $(JARFILE) > $(BUILD_TOP)/MAIN_CLASS_NAME

romize: $(BUILD_TOP)/squawk.suite.c

$(BUILD_TOP)/squawk.suite.c: $(JARFILES)
	$(AT)rm -rf $(TMP)
	$(AT)mkdir -p $(TMP)/classes $(BUILD_TOP)
	$(AT)for i in $(JARFILES); do (cd $(TMP)/classes; $(JAR) x) < $$i; done
	$(AT)$(JAVA) -Xbootclasspath/a:$(SQUAWK_TOP)/tools/asm-all-5.2.jar -cp $(SQUAWK_TOP)/build.jar com.sun.squawk.builder.glue.NativeGlueGen -d:$(BUILD_TOP) $(TMP)/classes
	$(AT)tar cf - -C $(BUILD_TOP)/cldc/classes .  | (cd $(TMP)/classes; tar xf -)
	$(AT)mkdir -p $(TMP)/classes2
	$(AT)jar cf $(TMP)/classes.jar -C $(TMP)/classes .
	$(AT)echo "$$($(CAT) $(BUILD_TOP)/MAIN_CLASS_NAME).main([Ljava/lang/String;)V" >> $(TMP)/main.config
	$(AT)$(JAVA) -cp $(SQUAWK_TOP)/build.jar:$(SQUAWK_TOP)/tools/asm-all-5.2.jar com.sun.squawk.builder.dca.DeadCodeAnalyzer -w -config $(DCA_CONFIG),$(TMP)/main.config -o $(TMP)/unused -u $(TMP)/used -i $(TMP)/itf -x $(TMP)/xref $(TMP)/classes.jar
	$(AT)$(CAT) $(TMP)/itf >> $(TMP)/unused
	$(AT)$(JAVA) -cp $(SQUAWK_TOP)/build.jar:$(SQUAWK_TOP)/tools/asm-all-5.2.jar com.sun.squawk.builder.filter.Filter $(TMP)/unused $(TMP)/classes.jar $(TMP)/classes2.jar
	$(AT)$(JAVA) -cp $(SQUAWK_TOP)/build.jar:$(SQUAWK_TOP)/tools/asm-all-5.2.jar com.sun.squawk.builder.dca.DeadCodeAnalyzer -w -config $(DCA_CONFIG),$(TMP)/main.config -o $(TMP)/unused2 -u $(TMP)/used2 -i $(TMP)/itf2 -x $(TMP)/xref2 $(TMP)/classes2.jar
	$(AT)$(CAT) $(TMP)/itf2 >> $(TMP)/unused2
	$(AT)$(JAVA) -cp $(SQUAWK_TOP)/build.jar:$(SQUAWK_TOP)/tools/asm-all-5.2.jar com.sun.squawk.builder.filter.Filter $(TMP)/unused2 $(TMP)/classes2.jar $(TMP)/classes3.jar
	$(AT)(cd $(TMP)/classes2; jar xf $(TMP)/classes3.jar)
	$(AT)mkdir -p $(TMP)/weaved
	$(AT)$(JAVA) -cp $(SQUAWK_TOP)/tools/retroweaver-all-squawk.jar:$(SQUAWK_TOP)/hosted-support/classes.jar:$(SQUAWK_TOP)/romizer/classes.jar:$(SQUAWK_TOP)/cldc/classes.jar:$(SQUAWK_TOP)/translator/classes.jar com.sun.squawk.SquawkRetroWeaver $(TMP)/classes2 $(TMP)/weaved
	$(AT)mkdir -p $(TMP)/j2meclasses
	$(AT)$(SQUAWK_TOP)/tools/linux-x86/preverify -classpath $(SQUAWK_TOP)/cldc/classes.target.jar -d $(TMP)/j2meclasses $(TMP)/weaved
	$(AT)$(JAVA) -cp $(BUILD_TOP)/cldc/classes:$(SQUAWK_TOP)/hosted-support/classes.jar:$(SQUAWK_TOP)/romizer/classes.jar:$(SQUAWK_TOP)/cldc/classes.jar:$(SQUAWK_TOP)/translator/classes.jar \
		com.sun.squawk.Romizer $(ROMIZER_FLAGS) -strip:a -mainclass:$(shell $(CAT) $(BUILD_TOP)/MAIN_CLASS_NAME) -DGC_com.sun.squawk.Lisp2Collector=false -DPLATFORM_TYPE_DELEGATING=false \
		-DGC_com.sun.squawk.Lisp2GenerationalCollector=false -DPLATFORM_TYPE_SOCKET=false \
		-DMACROIZE=true -DGC_com.sun.squawk.CheneyCollector=true -DPLATFORM_TYPE_BARE_METAL=true -DPLATFORM_TYPE_NATIVE=false \
		-d:$(BUILD_TOP) -o:squawk -arch:X86 -endian:little -cp:$(TMP)/j2meclasses -java5cp:$(TMP)/j2meclasses -nometadata -noApi $(TMP)/j2meclasses
	$(AT)$(JAVA) -cp $(SQUAWK_TOP)/hosted-support/classes.jar:$(SQUAWK_TOP)/mapper/classes.jar:$(SQUAWK_TOP)/cldc/classes.jar:$(SQUAWK_TOP)/translator/classes.jar \
		com.sun.squawk.suiteconverter.FlashConverter -c $(BUILD_TOP)/squawk.suite 0
	$(AT)$(EGREP) '#define com_sun_squawk_VM ' $(BUILD_TOP)/vmcore/src/vm/classes.h | $(AWK) '{print $$3}' > $(BUILD_TOP)/CID
	$(AT)$(JAVA) -cp $(SQUAWK_TOP)/hosted-support/classes.jar:$(SQUAWK_TOP)/mapper/classes.jar:$(SQUAWK_TOP)/cldc/classes.jar:$(SQUAWK_TOP)/translator/classes.jar \
		com.sun.squawk.suiteconverter.FlashConverter -m:$$($(CAT) $(BUILD_TOP)/CID) $(BUILD_TOP)/squawk.suite 0 > $(BUILD_TOP)/vmcore/src/vm/methodOffsets.h

buildflags:
	$(AT)echo "#define BUILD_FLAGS \""$(BUILD_FLAGS)"\"" > $(TMP)/buildflags.h
	$(AT)if [ -f $(BUILD_TOP)/vmcore/src/vm/native.c.inc ]; then \
		echo "#define INCLUDE_NATIVE" >> $(TMP)/buildflags.h; \
	fi
	$(AT)echo "#define MAIN_CLASS_NAME "$(shell $(CAT) $(BUILD_TOP)/MAIN_CLASS_NAME) >> $(TMP)/buildflags.h
	$(AT)if [ -f $(BUILD_TOP)/vmcore/src/vm/buildflags.h ]; then \
	    diff $(TMP)/buildflags.h $(BUILD_TOP)/vmcore/src/vm/buildflags.h > /dev/null || cp $(TMP)/buildflags.h $(BUILD_TOP)/vmcore/src/vm/buildflags.h; \
	else \
		cp $(TMP)/buildflags.h $(BUILD_TOP)/vmcore/src/vm/buildflags.h; \
	fi

compile: buildflags $(OBJECT_FILES)

-include $(DEPENDS)

$(OBJECT_DIR)/squawk.suite.o: $(BUILD_TOP)/squawk.suite.c
	$(AT)$(CC) -c $(CFLAGS) -o $@ $<

$(OBJECT_DIR)/%.o: %.c
	$(AT)$(CC) -c $(CFLAGS) -o $@ $<

$(BUILD_TOP)/squawk : $(OBJECT_FILES)
	$(AT)$(CC) $(LDFLAGS) -o $@ $(OBJECT_FILES) $(LDSUFFIXES)

link: $(BUILD_TOP)/squawk

strip:
	$(AT)cp $(BUILD_TOP)/squawk $(BUILD_TOP)/squawk.elf
	$(AT)$(STRIP) $(BUILD_TOP)/squawk

map:
	$(AT)java -cp $(SQUAWK_TOP)/hosted-support/classes.jar:$(SQUAWK_TOP)/mapper/classes.jar:$(SQUAWK_TOP)/cldc/classes.jar:$(SQUAWK_TOP)/translator/classes.jar com.sun.squawk.ObjectMemoryMapper -o:$(BUILD_TOP)/squawk.suite.map -cp:$(TMP)/j2meclasses $(BUILD_TOP)/squawk.suite

clean:
	$(AT)rm -rf $(CLEAN_TARGETS)

.PHONY: all dirs romize buildflags compile link strip map clean
