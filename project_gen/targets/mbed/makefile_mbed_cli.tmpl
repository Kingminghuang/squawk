# template for MBED

AT ?= @

JAVA = java
JAVAC = javac
JAR = jar
FIND = find
MBED = mbed
AWK = awk
EGREP = egrep
CAT = cat

SQUAWK_TOP = squawk
BUILD_TOP ?= build
BUILD_TOP_ABS = $(filter /%,$(BUILD_TOP))
ifeq ($(BUILD_TOP_ABS),)
  BUILD_TOP_ABS = $(shell pwd)/$(BUILD_TOP)
endif
JARFILE = classes.jar
JARFILES = $(JARFILE) $(SQUAWK_TOP)/cldc/classes.target.jar mbed_hal.jar

DCA_CONFIG := $(SQUAWK_TOP)/builder/dca.config
MAPPER_CONFIG = $(SQUAWK_TOP)/builder/mapper.config
JAVA_APPLICATION_MANAGER_CONFIG = $(SQUAWK_TOP)/builder/java_application_manager.config
MULTI_ISOLATE_CONFIG = $(SQUAWK_TOP)/builder/multi_isolate.config
DEBUGGER_CONFIG = $(SQUAWK_TOP)/builder/debugger.config

MAP ?= false

ifeq ($(MAP),true)
  DCA_CONFIG := $(DCA_CONFIG),$(MAPPER_CONFIG)
else
  ROMIZER_FLAGS += -stripSystemClassName
endif

ifeq ($(STATIC_MAIN_CLASS),false)
  DCA_CONFIG := $(DCA_CONFIG),$(JAVA_APPLICATION_MANAGER_CONFIG)
  BUILD_FLAGS += -DSTATIC_MAIN_CLASS=0
endif

ifeq ($(ENABLE_MULTI_ISOLATE),true)
  DCA_CONFIG := $(DCA_CONFIG),$(MULTI_ISOLATE_CONFIG)
endif

ifeq ($(ENABLE_SDA_DEBUGGER),true)
  DCA_CONFIG := $(DCA_CONFIG),$(DEBUGGER_CONFIG)
  JARFILES += $(SQUAWK_TOP)/debugger/debugger.jar
endif

DCA_CONFIG := $(DCA_CONFIG),$(SQUAWK_TOP)/builder/$(GC_DCA_CONF)

BUILD_FLAGS += -DMACROIZE -D_GNU_SOURCE -DSQUAWK_64=false -DPLATFORM_BIG_ENDIAN=false -DPLATFORM_UNALIGNED_LOADS=false -DPLATFORM_TYPE_BARE_METAL=1
BUILD_FLAGS += -DDEFAULT_RAM_SIZE=$(RAM_SIZE)
BUILD_FLAGS += -DSERVICE_CHUNK_SIZE=$(SERVICE_CHUNK_SIZE)
BUILD_FLAGS += -DTARGET_$(TARGET) -DTARGET_$(MCU)
BUILD_FLAGS += -DFASTALLOC=false
BUILD_FLAGS += -DGCC_OPTIMIZE_INTERPRETER_LOOP=0
BUILD_FLAGS += -DMINIMAL_ERROR_REPORT
BUILD_FLAGS += -DHAS_METHOD_OFFSETS=1

TMP = $(BUILD_TOP_ABS)
CLEAN_TARGETS = $(BUILD_TOP) $(JARFILE) $(TMP)/classes classes hal_classes mbed_hal.jar

HAL_CLASSES_JAVA = $(shell $(FIND) $(SQUAWK_TOP)/targets/mbed/src/classes $(SQUAWK_TOP)/targets/mbed/src/targets/$(TARGET)/classes -name '*.java' -print)
JAVA_SOURCE_FILES = $(shell $(FIND) src/classes -name '*.java' -print)

all: dirs mbed_hal.jar $(JARFILE) romize buildflags compile

dirs:
	$(AT)mkdir -p $(BUILD_TOP)
	mbed toolchain GCC_ARM
	mbed target $(TARGET)

mbed_hal.jar: $(HAL_CLASSES_JAVA)
	$(AT)rm -rf hal_classes
	$(AT)mkdir -p hal_classes
	$(AT)$(JAVAC) -target 1.4 -source 1.4 -classpath $(SQUAWK_TOP)/cldc/classes.target.jar -d hal_classes $(HAL_CLASSES_JAVA)
	$(AT)$(JAR) cf mbed_hal.jar -C hal_classes .

$(JARFILE): $(JAVA_SOURCE_FILES)
	$(AT)rm -rf classes
	$(AT)mkdir -p classes
	$(AT)$(JAVAC) -bootclasspath $(SQUAWK_TOP)/cldc/classes.target.jar -classpath mbed_hal.jar -d classes $(JAVA_SOURCE_FILES)
	$(AT)$(JAR) cf classes.jar -C classes .
ifeq ($(STATIC_MAIN_CLASS),true)
	$(AT)$(JAVA) -cp $(SQUAWK_TOP)/build.jar:$(SQUAWK_TOP)/tools/asm-all-5.2.jar com.sun.squawk.builder.asm.MainFinder $(JARFILE) > $(BUILD_TOP)/MAIN_CLASS_NAME
else
	$(AT)echo $(MAIN_CLASS_NAME) > $(BUILD_TOP)/MAIN_CLASS_NAME
endif

romize: $(BUILD_TOP)/squawk.suite.c

$(BUILD_TOP)/squawk.suite.c: $(JARFILES)
	$(AT)mkdir -p $(TMP)/classes $(BUILD_TOP)
	$(AT)for i in $(JARFILES); do (cd $(TMP)/classes; $(JAR) x) < $$i; done
	$(AT)$(JAVA) -Xbootclasspath/a:$(SQUAWK_TOP)/tools/asm-all-5.2.jar -cp $(SQUAWK_TOP)/build.jar com.sun.squawk.builder.glue.NativeGlueGen -d:$(BUILD_TOP) $(TMP)/classes
	$(AT)tar cf - -C $(BUILD_TOP)/cldc/classes .  | (cd $(TMP)/classes; tar xf -)
	$(AT)mkdir -p $(TMP)/classes2
	$(AT)jar cf $(TMP)/classes.jar -C $(TMP)/classes .
	$(AT)echo "$$($(CAT) $(BUILD_TOP)/MAIN_CLASS_NAME).main([Ljava/lang/String;)V" >> $(TMP)/main.config
	$(AT)$(JAVA) -cp $(SQUAWK_TOP)/build.jar:$(SQUAWK_TOP)/tools/asm-all-5.2.jar com.sun.squawk.builder.dca.DeadCodeAnalyzer -w -config $(DCA_CONFIG),$(TMP)/main.config -o $(TMP)/unused -u $(TMP)/used -i $(TMP)/itf -x $(TMP)/xref $(TMP)/classes.jar
	$(AT)$(CAT) $(TMP)/itf >> $(TMP)/unused
	$(AT)$(JAVA) -cp $(SQUAWK_TOP)/build.jar:$(SQUAWK_TOP)/tools/asm-all-5.2.jar com.sun.squawk.builder.filter.Filter $(TMP)/unused $(TMP)/classes.jar $(TMP)/classes2.jar
	$(AT)$(JAVA) -cp $(SQUAWK_TOP)/build.jar:$(SQUAWK_TOP)/tools/asm-all-5.2.jar com.sun.squawk.builder.dca.DeadCodeAnalyzer -w -config $(DCA_CONFIG),$(TMP)/main.config -o $(TMP)/unused2 -u $(TMP)/used2 -i $(TMP)/itf2 -x $(TMP)/xref2 $(TMP)/classes2.jar
	$(AT)$(CAT) $(TMP)/itf2 >> $(TMP)/unused2
	$(AT)$(JAVA) -cp $(SQUAWK_TOP)/build.jar:$(SQUAWK_TOP)/tools/asm-all-5.2.jar com.sun.squawk.builder.filter.Filter $(TMP)/unused2 $(TMP)/classes2.jar $(TMP)/classes3.jar
	$(AT)(cd $(TMP)/classes2; jar xf $(TMP)/classes3.jar)
	$(AT)mkdir -p $(TMP)/weaved
	$(AT)$(JAVA) -cp $(SQUAWK_TOP)/tools/retroweaver-all-squawk.jar:$(SQUAWK_TOP)/hosted-support/classes.jar:$(SQUAWK_TOP)/romizer/classes.jar:$(SQUAWK_TOP)/cldc/classes.jar:$(SQUAWK_TOP)/translator/classes.jar com.sun.squawk.SquawkRetroWeaver $(TMP)/classes2 $(TMP)/weaved
	$(AT)mkdir -p $(TMP)/j2meclasses
	$(AT)$(SQUAWK_TOP)/tools/linux-x86/preverify -classpath $(SQUAWK_TOP)/cldc/classes.target.jar -d $(TMP)/j2meclasses $(TMP)/weaved
	$(AT)$(JAVA) -cp $(BUILD_TOP)/cldc/classes:$(SQUAWK_TOP)/hosted-support/classes.jar:$(SQUAWK_TOP)/romizer/classes.jar:$(SQUAWK_TOP)/cldc/classes.jar:$(SQUAWK_TOP)/translator/classes.jar \
		com.sun.squawk.Romizer $(ROMIZER_FLAGS) -strip:a -mainclass:$(shell $(CAT) $(BUILD_TOP)/MAIN_CLASS_NAME) \
		$(GC_JAVAFLAG) -DPLATFORM_TYPE_SOCKET=false -DPLATFORM_TYPE_DELEGATING=false \
		-DMACROIZE=true -DPLATFORM_TYPE_BARE_METAL=true -DPLATFORM_TYPE_NATIVE=false \
		-d:$(BUILD_TOP) -o:squawk -arch:X86 -endian:little -cp:$(TMP)/j2meclasses -java5cp:$(TMP)/j2meclasses -nometadata -noApi $(TMP)/j2meclasses
	$(AT)$(JAVA) -cp $(SQUAWK_TOP)/hosted-support/classes.jar:$(SQUAWK_TOP)/mapper/classes.jar:$(SQUAWK_TOP)/cldc/classes.jar:$(SQUAWK_TOP)/translator/classes.jar \
		com.sun.squawk.suiteconverter.FlashConverter -c $(BUILD_TOP)/squawk.suite 0
	$(AT)$(EGREP) '#define com_sun_squawk_VM ' $(BUILD_TOP)/vmcore/src/vm/classes.h | $(AWK) '{print $$3}' > $(BUILD_TOP)/cid
	$(AT)$(JAVA) -cp $(SQUAWK_TOP)/hosted-support/classes.jar:$(SQUAWK_TOP)/mapper/classes.jar:$(SQUAWK_TOP)/cldc/classes.jar:$(SQUAWK_TOP)/translator/classes.jar \
		com.sun.squawk.suiteconverter.FlashConverter -m:$$($(CAT) $(BUILD_TOP)/cid) $(BUILD_TOP)/squawk.suite 0 > $(BUILD_TOP)/vmcore/src/vm/methodOffsets.h

buildflags:
	$(AT)echo "#define BUILD_FLAGS \""$(BUILD_FLAGS)"\"" > $(TMP)/buildflags.h
	$(AT)if [ -f $(BUILD_TOP)/vmcore/src/vm/native.c.inc ]; then \
		echo "#define INCLUDE_NATIVE" >> $(TMP)/buildflags.h; \
	fi
	$(AT)echo "#define MAIN_CLASS_NAME "$(shell $(CAT) $(BUILD_TOP)/MAIN_CLASS_NAME) >> $(TMP)/buildflags.h
	$(AT)if [ -f $(BUILD_TOP)/vmcore/src/vm/buildflags.h ]; then \
	    diff $(TMP)/buildflags.h $(BUILD_TOP)/vmcore/src/vm/buildflags.h > /dev/null || cp $(TMP)/buildflags.h $(BUILD_TOP)/vmcore/src/vm/buildflags.h; \
	else \
		cp $(TMP)/buildflags.h $(BUILD_TOP)/vmcore/src/vm/buildflags.h; \
	fi

compile:
	$(MBED) compile --profile small.json -vv $(BUILD_FLAGS)

map:
	$(AT)java -cp $(SQUAWK_TOP)/hosted-support/classes.jar:$(SQUAWK_TOP)/mapper/classes.jar:$(SQUAWK_TOP)/cldc/classes.jar:$(SQUAWK_TOP)/translator/classes.jar com.sun.squawk.ObjectMemoryMapper -o:$(BUILD_TOP)/squawk.suite.map -cp:$(TMP)/j2meclasses $(BUILD_TOP)/squawk.suite

clean:
	$(AT)rm -rf $(CLEAN_TARGETS)

.PHONY: all dirs romize buildflags compile map clean run-debugger-proxy
