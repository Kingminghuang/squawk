/*
 * Copyright 2004-2010 Sun Microsystems, Inc. All Rights Reserved.
 * Copyright 2011 Oracle Corporation. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 *
 * This code is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2
 * only, as published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 2 for more details (a copy is
 * included in the LICENSE file that accompanied this code).
 *
 * You should have received a copy of the GNU General Public License
 * version 2 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 *
 * Please contact Oracle Corporation, 500 Oracle Parkway, Redwood
 * Shores, CA 94065 or visit www.oracle.com if you need additional
 * information or have any questions.
 */

#if defined(__i386__) || defined(__i386) || defined(_M_IX86) || defined(_M_X64)  || defined(_M_AMD64)
#    define PROCESSOR_ARCHITECTURE_X86 1
#    define ARM_FPA 0
#elif defined(__ppc__) || defined(__ppc)
#    define PROCESSOR_ARCHITECTURE_X86 0
#    define ARM_FPA 0
#elif defined(__sparc__) || defined(__sparc) 
#    define PROCESSOR_ARCHITECTURE_X86 0
#    define ARM_FPA 0
#elif defined(__arm__)
#    define PROCESSOR_ARCHITECTURE_X86 0
#    ifndef ARM_FPA
#    ifdef __VFP_FP__
#        define ARM_FPA 0
#    else /*__VFP_FP__*/
#        define ARM_FPA 1
#    endif /*__VFP_FP__*/
#    endif
#endif

#define true 1
#define false 0
#define boolean int
#define null ((void *)0)
#define byte signed char
#define ujlong unsigned jlong

#ifndef INLINE
#    define INLINE inline static
#endif

/* It actualy never seems to pay off to inline this FP code.
   But the switch is here to play with.
*/
#define INLINE_JAVA_FP 0

#ifndef INLINE_JAVA_FP
#    if ARM_FPA
#        define INLINE_JAVA_FP 0
#    else
#        define INLINE_JAVA_FP 1
#    endif
#endif

/*if[KERNEL_SQUAWK]*/
#ifndef MAXSIG
#    define MAXSIG 32
#endif
/*end[KERNEL_SQUAWK]*/

/**
 * These two conditional compilation macros are also used as values in certain parts and
 * as such must be given a value if they are not defined. This also means that they must
 * used with the '#if' as opposed to '#ifdef' preprocessor directive when surrounding
 * conditional code.
 */
#if defined(ASSUME) && ASSUME != 0
#undef ASSUME
#define ASSUME true
#else
#define ASSUME false
#endif

#if defined(SQUAWK_64) && SQUAWK_64 != 0
#undef SQUAWK_64
#define SQUAWK_64 true
#else
#define SQUAWK_64 false
#endif

/**
 * Set all PLATFORM_TYPES based on the one defined.
 */
#if defined(PLATFORM_TYPE_DELEGATING)
#if PLATFORM_TYPE_DELEGATING==0
#error PLATFORM_TYPE_DELEGATING must be 1 or undefined
#endif
#define PLATFORM_TYPE_NATIVE 0
#define PLATFORM_TYPE_SOCKET 0
#define PLATFORM_TYPE_BARE_METAL 0
#elif defined(PLATFORM_TYPE_BARE_METAL)
#if PLATFORM_TYPE_BARE_METAL==0
#error PLATFORM_TYPE_BARE_METAL must be 1 or undefined
#endif
#define PLATFORM_TYPE_NATIVE 0
#define PLATFORM_TYPE_SOCKET 0
#define PLATFORM_TYPE_DELEGATING 0
#elif defined(PLATFORM_TYPE_NATIVE)
#if PLATFORM_TYPE_NATIVE==0
#error PLATFORM_TYPE_NATIVE must be 1 or undefined
#endif
#define PLATFORM_TYPE_DELEGATING 0
#define PLATFORM_TYPE_SOCKET 0
#define PLATFORM_TYPE_BARE_METAL 0
#elif defined(PLATFORM_TYPE_SOCKET)
#if PLATFORM_TYPE_SOCKET==0
#error PLATFORM_TYPE_SOCKET must be 1 or undefined
#endif
#define PLATFORM_TYPE_NATIVE 0
#define PLATFORM_TYPE_DELEGATING 0
#define PLATFORM_TYPE_BARE_METAL 0
#else
#error "unspecified platform type"
#endif

#ifndef STATIC_MAIN_CLASS
#define STATIC_MAIN_CLASS PLATFORM_TYPE_BARE_METAL
#endif

#include "platform_md.h"

extern jlong sysTimeMicros(void);
extern jlong sysTimeMillis(void);